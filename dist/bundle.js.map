{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/Page.ts","src/VideoControls.ts","src/main.ts","src/util.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { VideoControls } from \"./VideoControls\";\n\nconst movieSfx = ['mov', 'mp4'];\nconst imgSfx = ['jpg', 'png', 'webp'];\n\nfunction fillImage(item : HTMLElement, src: string) {\n    const width = parseInt(item.dataset['width']);\n    const height = parseInt(item.dataset['height']);\n    const alt = item.dataset['alt'] || \"UI image\";\n\n    const img = new Image(width, height);\n    img.classList.add('poster');\n    img.onload = () => img.classList.add('visible');\n    img.alt = alt;\n    img.src = src;\n\n    const container = item.querySelector('.frame') || item;\n\n    container.insertAdjacentElement('beforeend', img);\n}\n\nfunction fillMovie(item: HTMLElement, src: string) {\n    const width = parseInt(item.dataset['width']);\n    const height = parseInt(item.dataset['height']);\n\n    const movie = document.createElement(\"video\");\n    movie.width = width;\n    movie.height = height;\n    movie.classList.add('poster');\n    const controls = new VideoControls(movie);\n\n    const container = item.querySelector('.frame') || item;\n    container.insertAdjacentElement('beforeend', movie);\n    container.insertAdjacentElement('beforeend', controls.ui);\n\n    movie.src = src;\n}\n\n\nfunction fillItem(item : HTMLElement) {\n    const src = item.dataset['src'];\n    const comps = src.split('.');\n    if (comps.length < 2) {\n        console.warn('No file suffix on source', src);\n        return;\n    }\n\n    const sfx = comps[comps.length - 1];\n\n    if(movieSfx.indexOf(sfx) !== -1) {\n        fillMovie(item, src);\n    } else if (imgSfx.indexOf(sfx) !== -1) {\n        fillImage(item, src);\n    } else {\n        console.warn(\"Don't know how to fill item type: \", sfx);\n    }\n}\n\nfunction didObserve(entries: IntersectionObserverEntry[], observer : IntersectionObserver) {\n    for (const entry of entries) {\n        // Should always be true (?)\n        if (entry.intersectionRatio >= 0.5) {\n            fillItem(entry.target as HTMLElement);\n            observer.unobserve(entry.target);\n        }\n    }\n}\n\nexport function startPage() {\n    const itemElements = document.querySelectorAll('.item');\n    if (!itemElements)\n        return;\n\n    const io = new IntersectionObserver(didObserve, { threshold : 0.5 });\n    itemElements.forEach((el : Element) => io.observe(el));\n}","import { createDom } from \"./util\";\n\nconst formatTime = (time: number) : string => {\n    // @ts-ignore\n    const minutes = `${Math.floor(time / 60)}`.padStart(2, '0');\n    // @ts-ignore\n    const seconds = `${Math.floor(time % 60)}`.padStart(2, '0');\n\n    return `${minutes}:${seconds}`;\n};\n\n\nexport class VideoControls {\n    private video : HTMLVideoElement;\n\n    private duration : number;\n    private durationEl : HTMLElement;\n\n    private progressEl : HTMLElement;\n    private loadProgressEl : HTMLElement;\n    private clockEl : HTMLElement;\n    private playPauseButton : HTMLElement;\n\n    private controlsContainer : HTMLElement;\n\n    constructor(video : HTMLVideoElement) {\n        this.video = video;\n\n        this.setupUI();\n\n        this.video.addEventListener('canplay', this.canPlay);\n        this.video.addEventListener('timeupdate', this.timeUpdate);\n        this.video.addEventListener('progress', this.loadProgress);\n        this.video.addEventListener('ended', this.endedPlayback);\n        this.video.addEventListener('loadedmetadata', this.gotMetadata);\n\n        // Sometimes the video cna be in the ready state before we attach the listeners\n        // If this is the case fill everything in manually...\n        if (this.video.readyState >= 2) {\n            this.canPlay();\n            this.setDuration(this.video.duration);\n            this.loadProgress();\n        }\n    }\n\n    public get ui() {\n        return this.controlsContainer;\n    }\n\n    private setupUI() {\n        this.playPauseButton = createDom('div', ['playPauseButton', 'paused']);\n        this.playPauseButton.addEventListener(\n            'click',\n            this.playPause\n        );\n\n        this.loadProgressEl = createDom('div', ['loadProgress']);\n        this.progressEl = createDom('div', ['playProgress']);\n\n        const track = createDom('div', ['track'], [this.loadProgressEl, this.progressEl]);\n        this.clockEl = createDom('div', ['clock']);\n\n        this.controlsContainer = createDom(\n            'div',\n            ['videoControls', 'disabled'],\n            [ this.playPauseButton, track, this.clockEl ]\n        );\n    }\n\n    private setDuration(seconds : number) {\n        this.duration = seconds;\n        if (this.durationEl) this.durationEl.innerText = formatTime(seconds);\n    }\n\n\n    private setCurrentTime(seconds : number) {\n        const playedPc = Math.round((seconds / this.duration) * 100);\n        this.progressEl.style.width = `${playedPc}%`;\n        if (this.clockEl) this.clockEl.innerText = formatTime(seconds);\n    }\n\n    private playPause = () => {\n        if (this.video.paused) {\n            this.video.play();\n        } else {\n            this.video.pause();\n        }\n\n        this.playPauseButton.classList.toggle('playing');\n    }\n\n    private canPlay = () => {\n        this.setCurrentTime(this.video.currentTime);\n        this.controlsContainer.classList.remove('disabled');\n        this.video.classList.add('visible');\n    }\n\n    private gotMetadata = () => {\n        this.setDuration(Math.round(this.video.duration));\n    }\n\n    private endedPlayback = () => {\n        if (Math.round(this.video.currentTime) === Math.round(this.duration)) {\n            this.video.currentTime = 0;\n            this.setCurrentTime(0);\n        }\n    }\n\n    private timeUpdate = () => {\n        this.setCurrentTime(Math.round(this.video.currentTime));\n    }\n\n    private loadProgress = () => {\n        const ranges = this.video.buffered;\n        if (ranges.length === 0)\n            return;\n\n        const seconds = ranges.end(0)\n\n        const loadPc = Math.round((seconds / this.duration) * 100);\n        this.loadProgressEl.style.width = `${loadPc}%`;\n    }\n}","import { startPage } from \"./Page\";\n\ndocument.addEventListener('DOMContentLoaded', startPage);","function createDom(\n    tagName : string,\n    classList : string[] = [],\n    content : string | Element | Element[] | null = null,\n    parent : Element | null = null) : HTMLElement\n{\n\n    let dom = document.createElement(tagName);\n\n    if (classList.length > 0) {\n        for (const cl of classList) {\n            dom.classList.add(cl);\n        }\n    }\n\n    if (content !== null) {\n        if (typeof(content) === \"string\") {\n            dom.insertAdjacentText('beforeend', content);\n        } else if (content instanceof Element) {\n            dom.insertAdjacentElement('beforeend', content);\n        } else if (Array.isArray(content)) {\n            for (const el of content) {\n                dom.insertAdjacentElement('beforeend', el);\n            }\n        }\n    }\n\n    if (parent) {\n        parent.insertAdjacentElement('beforeend', dom);\n    }\n\n    return dom;\n}\n\nexport { createDom }"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}